too.) I mean like this: (Edit: The above line gives the following output as it should. This is of course from my particular file. The point is that it needs to output binary strings with a concatenation inbetween each) 1001101.1101111.1110010.1100101.1100010.1100001.1110010.1101110.1100101.100000.1101111.1110010.100000 Where as the following line: gives Exception in thread "main" java.lang.IndexOutOfBoundsException at java.io.FileInputStream.readBytes(Native Method) at java.io.FileInputStream.read(FileInputStream.java:199) at org.apache.poi.hssf.record.RecordInputStream.nextRecord(RecordInputStream.java:106) at org.apache.poi.hssf.eventusermodel.HSSFRecordStream.getNextRecord(HSSFRecordStream.java:128) at org.apache.poi.hssf.eventusermodel.HSSFRecordStream.nextRecord(HSSFRecordStream.java:93) at org.apache.poi.hssf.eventusermodel.HSSFEventFactory.genericProcessEvents(HSSFEventFactory.java:141) at org.apache.poi.hssf.eventusermodel.HSSFEventFactory.processEvents(HSSFEventFactory.java:98) at src.Excel.main(Excel.java:21)
2.7.2.jar" to the class path. DEBUG [South Agent 1] (ConstructorResolver.java:195) - Ignoring constructor [public abc.def.mdd.channel.corba.M2000AlarmChannel( java.lang.String, int, java.lang.String, java.lang.String, com.citycorp.mdd.msg.MDDComponent ) throws java.lang.Exception ] of bean 'Jakarta': org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'Jakarta' defined in file [/opt/app/abcdef/rt_dev/etc/HUAWEI_M2KJKT_ALARM.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.lang.String]: Could not convert constructor argument value of type [abc.def.mdd.msg.alarm.huawei.MDDPackagerAlarmM2000] to required type [java.lang.String]: Failed to convert value of type [abc.def.mdd.msg.alarm.huawei.MDDPackagerAlarmM2000] to required type [java.lang.String]; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [abc.def.mdd.msg.alarm.huawei.MDDPackagerAlarmM2000] to required type [java.lang.String]: no matching editors or conversion strategy found The following are the signatures of the constructors for the abc.def.mdd.channel.corba.M2000AlarmChannel class: public M2000AlarmChannel( MDDComponent componenet ) public M2000AlarmChannel( String host, int port, String username, String password, MDDComponent componenet ) The class abc.def.mdd.msg.alarm.huawei.MDDPackagerAlarmM2000 implements MDDComponent (bean MDDStructurPackager). As you can see, Spring is instantiating some of the beans ie. MDDStructurPackager without problem. The problem is instantiating the 'Jakarta' bean. The implications of the lines: Error creating bean with name 'Jakarta' defined in file [/opt/app/abcdef/rt_dev/etc/HUAWEI_M2KJKT_ALARM.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.lang.String]: Could not convert constructor argument value of type [abc.def.mdd.msg.alarm.huawei.MDDPackagerAlarmM2000] to required type [java.lang.String]: are not clear. I am not sure the reasons for the type confusion when attempting to determine the appropriate constructor. It is possible that the problem is associated with the loading of the interface MDDComponent. If it was loaded twice, by different class loaders which are not related in the class loader hierarchy you could imagine problems associated with determining the correct constructor. Any ideas gratefully received, I am grasping at straws. Thanks Bryan
Java: GUIs must be initialized in the EDT thread? I'm Jason. I'm having a bit of a problem with the Substance look and feel (https://substance.dev.java.net/). My problem is more general. I've already got my GUI written and it works fine, but when I use a Substance Look-and-feel, it requires all GUI initialization to take place in the EDT thread (Event Dispatching Thread or something). Right now I'm using com.sun.java.swing.plaf.windows.WindowsLookAndFeel (not sure if I spelled that right) and it doesn't require anything of this sort. So I put the main initialization into the EDT by calling SwingUtilities.invokeLater(). This made it work. However, the program also spawns several other windows during its execution. Right now I have code like: SomeNewWindow.__init__ SomeNewWindow.doStuff ... some bs emitted This code works fine because by the time window.doStuff() is called, it's already initialized. But Substance requires me to do something like this: SomeNewWindow.__init__ ... bs emitted Here it sometimes throws a NullPointerException because window is not initialized by the time window.doStuff() is called. I can't put window.do
